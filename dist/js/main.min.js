$(function() {

  /* Show the next slide of the slideshow. */
  function animate() {
    var $activeSlide = $(".active"),
      $nextSlide = ($activeSlide.next().length > 0) ? $activeSlide.next() : $("#slides .slide:first"),
      timeline = new TimelineLite({ onComplete: onComplete, onCompleteParams: ["{self}", $activeSlide, $nextSlide], delay: 1 });

    // Create the timeline animation.
    timeline.set($nextSlide, { css: { zIndex: 3 } })
      .to($activeSlide.find(".description"), 3, { left: "12vw", autoAlpha: 1 })
      .to($activeSlide.find(".sub-description"), 3, { left: "12vw", autoAlpha: 1 }, "-=1.5")
      // TODO: Grayscale won't work in IE.
      .to($activeSlide, 3, { onUpdate: tweenGrayscale, onUpdateParams: ["{self}", 100, 0] }, "-=3")
      .to($activeSlide.find(".rectangle"), 2, { right: "2vw" })
      .fromTo($nextSlide, 2, { left: "100vw" }, { left: "0vw" }, "+=7");
  }

  /* Fired when the timeline has completed. */
  function onComplete(timeline, $previousSlide, $activeSlide) {
    $activeSlide.css("z-index", 2).addClass("active");

    resetSlide(timeline, $previousSlide);
    animate();
  }

  /* Reset the previous slide. */
  function resetSlide(timeline, $slide) {
    timeline.set($slide, { css: { zIndex: 1 } })
      .set($slide.find(".description"), { css: { left: "0vw", autoAlpha: 0 } })
      .set($slide.find(".sub-description"), { css: { left: "0vw", autoAlpha: 0 } })
      .set($slide, { "-webkit-filter": "grayscale(100%)", filter: "grayscale(100%)" })
      .set($slide.find(".rectangle"), { css: { right: -$slide.find(".rectangle").width() } });

    $slide.removeClass("active");
  }

  /* Tween the grayscale value. */
  function tweenGrayscale(timeline, start, end) {
    var progress = Math.floor(timeline.progress() * 100),
      value = start - progress;

    TweenMax.set(timeline.target, { "-webkit-filter": "grayscale(" + value + "%)", filter: "grayscale(" + value + "%)" });
  }

  animate();

});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiQoZnVuY3Rpb24oKSB7XG5cbiAgLyogU2hvdyB0aGUgbmV4dCBzbGlkZSBvZiB0aGUgc2xpZGVzaG93LiAqL1xuICBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIHZhciAkYWN0aXZlU2xpZGUgPSAkKFwiLmFjdGl2ZVwiKSxcbiAgICAgICRuZXh0U2xpZGUgPSAoJGFjdGl2ZVNsaWRlLm5leHQoKS5sZW5ndGggPiAwKSA/ICRhY3RpdmVTbGlkZS5uZXh0KCkgOiAkKFwiI3NsaWRlcyAuc2xpZGU6Zmlyc3RcIiksXG4gICAgICB0aW1lbGluZSA9IG5ldyBUaW1lbGluZUxpdGUoeyBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlLCBvbkNvbXBsZXRlUGFyYW1zOiBbXCJ7c2VsZn1cIiwgJGFjdGl2ZVNsaWRlLCAkbmV4dFNsaWRlXSwgZGVsYXk6IDEgfSk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHRpbWVsaW5lIGFuaW1hdGlvbi5cbiAgICB0aW1lbGluZS5zZXQoJG5leHRTbGlkZSwgeyBjc3M6IHsgekluZGV4OiAzIH0gfSlcbiAgICAgIC50bygkYWN0aXZlU2xpZGUuZmluZChcIi5kZXNjcmlwdGlvblwiKSwgMywgeyBsZWZ0OiBcIjEydndcIiwgYXV0b0FscGhhOiAxIH0pXG4gICAgICAudG8oJGFjdGl2ZVNsaWRlLmZpbmQoXCIuc3ViLWRlc2NyaXB0aW9uXCIpLCAzLCB7IGxlZnQ6IFwiMTJ2d1wiLCBhdXRvQWxwaGE6IDEgfSwgXCItPTEuNVwiKVxuICAgICAgLy8gVE9ETzogR3JheXNjYWxlIHdvbid0IHdvcmsgaW4gSUUuXG4gICAgICAudG8oJGFjdGl2ZVNsaWRlLCAzLCB7IG9uVXBkYXRlOiB0d2VlbkdyYXlzY2FsZSwgb25VcGRhdGVQYXJhbXM6IFtcIntzZWxmfVwiLCAxMDAsIDBdIH0sIFwiLT0zXCIpXG4gICAgICAudG8oJGFjdGl2ZVNsaWRlLmZpbmQoXCIucmVjdGFuZ2xlXCIpLCAyLCB7IHJpZ2h0OiBcIjJ2d1wiIH0pXG4gICAgICAuZnJvbVRvKCRuZXh0U2xpZGUsIDIsIHsgbGVmdDogXCIxMDB2d1wiIH0sIHsgbGVmdDogXCIwdndcIiB9LCBcIis9N1wiKTtcbiAgfVxuXG4gIC8qIEZpcmVkIHdoZW4gdGhlIHRpbWVsaW5lIGhhcyBjb21wbGV0ZWQuICovXG4gIGZ1bmN0aW9uIG9uQ29tcGxldGUodGltZWxpbmUsICRwcmV2aW91c1NsaWRlLCAkYWN0aXZlU2xpZGUpIHtcbiAgICAkYWN0aXZlU2xpZGUuY3NzKFwiei1pbmRleFwiLCAyKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcblxuICAgIHJlc2V0U2xpZGUodGltZWxpbmUsICRwcmV2aW91c1NsaWRlKTtcbiAgICBhbmltYXRlKCk7XG4gIH1cblxuICAvKiBSZXNldCB0aGUgcHJldmlvdXMgc2xpZGUuICovXG4gIGZ1bmN0aW9uIHJlc2V0U2xpZGUodGltZWxpbmUsICRzbGlkZSkge1xuICAgIHRpbWVsaW5lLnNldCgkc2xpZGUsIHsgY3NzOiB7IHpJbmRleDogMSB9IH0pXG4gICAgICAuc2V0KCRzbGlkZS5maW5kKFwiLmRlc2NyaXB0aW9uXCIpLCB7IGNzczogeyBsZWZ0OiBcIjB2d1wiLCBhdXRvQWxwaGE6IDAgfSB9KVxuICAgICAgLnNldCgkc2xpZGUuZmluZChcIi5zdWItZGVzY3JpcHRpb25cIiksIHsgY3NzOiB7IGxlZnQ6IFwiMHZ3XCIsIGF1dG9BbHBoYTogMCB9IH0pXG4gICAgICAuc2V0KCRzbGlkZSwgeyBcIi13ZWJraXQtZmlsdGVyXCI6IFwiZ3JheXNjYWxlKDEwMCUpXCIsIGZpbHRlcjogXCJncmF5c2NhbGUoMTAwJSlcIiB9KVxuICAgICAgLnNldCgkc2xpZGUuZmluZChcIi5yZWN0YW5nbGVcIiksIHsgY3NzOiB7IHJpZ2h0OiAtJHNsaWRlLmZpbmQoXCIucmVjdGFuZ2xlXCIpLndpZHRoKCkgfSB9KTtcblxuICAgICRzbGlkZS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcbiAgfVxuXG4gIC8qIFR3ZWVuIHRoZSBncmF5c2NhbGUgdmFsdWUuICovXG4gIGZ1bmN0aW9uIHR3ZWVuR3JheXNjYWxlKHRpbWVsaW5lLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHByb2dyZXNzID0gTWF0aC5mbG9vcih0aW1lbGluZS5wcm9ncmVzcygpICogMTAwKSxcbiAgICAgIHZhbHVlID0gc3RhcnQgLSBwcm9ncmVzcztcblxuICAgIFR3ZWVuTWF4LnNldCh0aW1lbGluZS50YXJnZXQsIHsgXCItd2Via2l0LWZpbHRlclwiOiBcImdyYXlzY2FsZShcIiArIHZhbHVlICsgXCIlKVwiLCBmaWx0ZXI6IFwiZ3JheXNjYWxlKFwiICsgdmFsdWUgKyBcIiUpXCIgfSk7XG4gIH1cblxuICBhbmltYXRlKCk7XG5cbn0pO1xuIl0sImZpbGUiOiJtYWluLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
